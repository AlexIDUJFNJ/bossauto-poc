{
  "name": "BossAuto - Flujo 1: Motor de Aprobaciones",
  "nodes": [
    {
      "parameters": {
        "path": "purchase-request",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "automotive-purchase-request"
    },
    {
      "parameters": {
        "functionCode": "// Validate incoming purchase request\nconst data = $input.item.json;\n\n// Required fields\nconst required = ['purchase_request_id', 'requester', 'items', 'total_amount', 'supplier'];\nconst missing = required.filter(field => !data[field]);\n\nif (missing.length > 0) {\n  throw new Error(`Missing required fields: ${missing.join(', ')}`);\n}\n\n// Validate requester\nif (!data.requester.name || !data.requester.email) {\n  throw new Error('Requester name and email are required');\n}\n\n// Validate items\nif (!Array.isArray(data.items) || data.items.length === 0) {\n  throw new Error('At least one item is required');\n}\n\n// Validate total_amount\nif (typeof data.total_amount !== 'number' || data.total_amount <= 0) {\n  throw new Error('Total amount must be a positive number');\n}\n\nreturn {\n  json: {\n    ...data,\n    validated: true,\n    validated_at: new Date().toISOString()\n  }\n};"
      },
      "id": "validate-input",
      "name": "Validate Input",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO purchase_requests (\n  request_id, requester_name, requester_department, requester_email,\n  total_amount, currency, supplier_name, supplier_code,\n  status, requested_date, delivery_date\n) VALUES (\n  '{{ $json.purchase_request_id }}',\n  '{{ $json.requester.name }}',\n  '{{ $json.requester.department }}',\n  '{{ $json.requester.email }}',\n  {{ $json.total_amount }},\n  '{{ $json.currency || \"USD\" }}',\n  '{{ $json.supplier.name }}',\n  '{{ $json.supplier.code }}',\n  'pending',\n  '{{ $json.requested_date }}',\n  '{{ $json.delivery_date }}'\n) RETURNING *;"
      },
      "id": "save-to-db",
      "name": "Save to PostgreSQL",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [650, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "BossAuto PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM approval_rules\nWHERE min_amount <= {{ $json.total_amount }}\n  AND (max_amount IS NULL OR max_amount >= {{ $json.total_amount }})\n  AND active = TRUE\nLIMIT 1;"
      },
      "id": "get-approval-rules",
      "name": "Get Approval Rules",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [850, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "BossAuto PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Apply business rules based on amount\nconst amount = $input.item.json.total_amount;\nconst rule = $input.item.json;\n\nlet approvalLevel, approverRole, slaHours;\n\nif (amount < 1000) {\n  approvalLevel = 'auto';\n  approverRole = 'Auto-aprobación';\n  slaHours = 0;\n} else if (amount < 5000) {\n  approvalLevel = 'manager';\n  approverRole = 'Gerente Compras';\n  slaHours = 24;\n} else if (amount < 20000) {\n  approvalLevel = 'director';\n  approverRole = 'Director Operaciones';\n  slaHours = 48;\n} else {\n  approvalLevel = 'ceo';\n  approverRole = 'CEO';\n  slaHours = 72;\n}\n\nreturn {\n  json: {\n    ...$input.item.json,\n    approval_level: approvalLevel,\n    approver_role: approverRole,\n    sla_hours: slaHours,\n    is_auto_approval: approvalLevel === 'auto'\n  }\n};"
      },
      "id": "apply-rules",
      "name": "Apply Business Rules",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "functionCode": "// Calculate SLA deadline\nconst slaHours = $input.item.json.sla_hours;\nconst deadline = new Date();\ndeadline.setHours(deadline.getHours() + slaHours);\n\nreturn {\n  json: {\n    ...$input.item.json,\n    sla_deadline: deadline.toISOString()\n  }\n};"
      },
      "id": "calculate-sla",
      "name": "Calculate SLA",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.is_auto_approval }}",
              "value2": true
            }
          ]
        }
      },
      "id": "branch-auto",
      "name": "Auto-approval?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1450, 300]
    },
    {
      "parameters": {
        "url": "=http://localhost:3001/api/v1/purchase-orders",
        "method": "POST",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "purchase_request_id",
              "value": "={{ $json.purchase_request_id }}"
            },
            {
              "name": "vendor_code",
              "value": "={{ $json.supplier.code }}"
            },
            {
              "name": "total_amount",
              "value": "={{ $json.total_amount }}"
            },
            {
              "name": "requested_by",
              "value": "={{ $json.requester.name }}"
            },
            {
              "name": "delivery_date",
              "value": "={{ $json.delivery_date }}"
            }
          ]
        },
        "options": {}
      },
      "id": "create-po-bc",
      "name": "Create PO in BC",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1650, 200]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO approval_history (\n  request_id, approval_level, approver_name,\n  action, sla_met\n) VALUES (\n  '{{ $json.purchase_request_id }}',\n  '{{ $json.approval_level }}',\n  '{{ $json.approver_role }}',\n  'pending',\n  NULL\n) RETURNING *;"
      },
      "id": "save-approval-history",
      "name": "Save Approval History",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1650, 400],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "BossAuto PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Prepare notification message\nconst { purchase_request_id, approver_role, total_amount, sla_deadline } = $input.item.json;\nconst deadlineDate = new Date(sla_deadline);\nconst hoursRemaining = Math.round((deadlineDate - new Date()) / (1000 * 60 * 60));\n\nlet urgencyEmoji = '📋';\nif (hoursRemaining <= 4) urgencyEmoji = '🚨';\nelse if (hoursRemaining <= 12) urgencyEmoji = '⚠️';\n\nconst message = `${urgencyEmoji} <b>Nueva Solicitud de Compra</b>\\n\\n` +\n  `<b>ID:</b> ${purchase_request_id}\\n` +\n  `<b>Monto:</b> $${total_amount.toLocaleString()}\\n` +\n  `<b>Aprobador:</b> ${approver_role}\\n` +\n  `<b>SLA:</b> ${hoursRemaining} horas\\n` +\n  `<b>Deadline:</b> ${deadlineDate.toLocaleString('es-ES')}\\n\\n` +\n  `Por favor revise y apruebe a la brevedad.`;\n\nreturn {\n  json: {\n    ...$input.item.json,\n    notification_message: message\n  }\n};"
      },
      "id": "prepare-notification",
      "name": "Prepare Notification",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1850, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO system_logs (\n  request_id, log_level, component, message\n) VALUES (\n  '{{ $json.purchase_request_id }}',\n  'INFO',\n  'approval_engine',\n  'Request processed successfully. Status: {{ $json.is_auto_approval ? \"approved\" : \"pending_approval\" }}'\n) RETURNING *;"
      },
      "id": "log-to-db",
      "name": "Log to system_logs",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [2050, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "BossAuto PostgreSQL"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"request_id\": \"{{ $json.purchase_request_id }}\",\n  \"status\": \"{{ $json.is_auto_approval ? 'approved' : 'pending_approval' }}\",\n  \"approval_level\": \"{{ $json.approval_level }}\",\n  \"approver\": \"{{ $json.approver_role }}\",\n  \"sla_deadline\": \"{{ $json.sla_deadline }}\",\n  \"notification_sent\": true\n}"
      },
      "id": "respond",
      "name": "Return Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2250, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{ "node": "Validate Input", "type": "main", "index": 0 }]]
    },
    "Validate Input": {
      "main": [[{ "node": "Save to PostgreSQL", "type": "main", "index": 0 }]]
    },
    "Save to PostgreSQL": {
      "main": [[{ "node": "Get Approval Rules", "type": "main", "index": 0 }]]
    },
    "Get Approval Rules": {
      "main": [[{ "node": "Apply Business Rules", "type": "main", "index": 0 }]]
    },
    "Apply Business Rules": {
      "main": [[{ "node": "Calculate SLA", "type": "main", "index": 0 }]]
    },
    "Calculate SLA": {
      "main": [[{ "node": "Auto-approval?", "type": "main", "index": 0 }]]
    },
    "Auto-approval?": {
      "main": [
        [{ "node": "Create PO in BC", "type": "main", "index": 0 }],
        [{ "node": "Save Approval History", "type": "main", "index": 0 }]
      ]
    },
    "Create PO in BC": {
      "main": [[{ "node": "Prepare Notification", "type": "main", "index": 0 }]]
    },
    "Save Approval History": {
      "main": [[{ "node": "Prepare Notification", "type": "main", "index": 0 }]]
    },
    "Prepare Notification": {
      "main": [[{ "node": "Log to system_logs", "type": "main", "index": 0 }]]
    },
    "Log to system_logs": {
      "main": [[{ "node": "Return Response", "type": "main", "index": 0 }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "name": "BossAuto",
      "id": "1"
    },
    {
      "name": "Purchase Orders",
      "id": "2"
    },
    {
      "name": "Approval Engine",
      "id": "3"
    }
  ],
  "pinData": {},
  "versionId": "1"
}
